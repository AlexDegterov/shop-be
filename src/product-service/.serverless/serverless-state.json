{
  "service": {
    "service": "product-service",
    "serviceObject": {
      "name": "product-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "region": "eu-west-1",
      "environment": {
        "ENV_STAGE": "dev",
        "PGHOST": "",
        "PGUSER": "",
        "PGDATABASE": "",
        "PGPASSWORD": "",
        "PGPORT": ""
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetProductByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-getProductById"
            }
          },
          "GetProductsListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-getProductsList"
            }
          },
          "CreateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-createProduct"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "product-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/product-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/product-service-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "product-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetProductByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1629794797755-2021-08-24T08:46:37.755Z/product-service.zip"
              },
              "Handler": "handler.getProductById",
              "Runtime": "nodejs14.x",
              "FunctionName": "product-service-dev-getProductById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV_STAGE": "dev",
                  "PGHOST": "",
                  "PGUSER": "",
                  "PGDATABASE": "",
                  "PGPASSWORD": "",
                  "PGPORT": ""
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductByIdLogGroup"
            ]
          },
          "GetProductsListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1629794797755-2021-08-24T08:46:37.755Z/product-service.zip"
              },
              "Handler": "handler.getProductsList",
              "Runtime": "nodejs14.x",
              "FunctionName": "product-service-dev-getProductsList",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV_STAGE": "dev",
                  "PGHOST": "",
                  "PGUSER": "",
                  "PGDATABASE": "",
                  "PGPASSWORD": "",
                  "PGPORT": ""
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsListLogGroup"
            ]
          },
          "CreateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1629794797755-2021-08-24T08:46:37.755Z/product-service.zip"
              },
              "Handler": "handler.createProduct",
              "Runtime": "nodejs14.x",
              "FunctionName": "product-service-dev-createProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ENV_STAGE": "dev",
                  "PGHOST": "",
                  "PGUSER": "",
                  "PGDATABASE": "",
                  "PGPASSWORD": "",
                  "PGPORT": ""
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProductLogGroup"
            ]
          },
          "GetProductsListLambdaVersionln41AcAvcao9EndFnhfPakgTcYAzZGohrMMGOiiLNk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsListLambdaFunction"
              },
              "CodeSha256": "tDw545PlUTdJuZE5tOAPYNydxnNGW0op/DHoG6crSlo="
            }
          },
          "CreateProductLambdaVersionp7UtJQJlS9CWvfoUkJ1zlyXFXpaeHutTpjYc7usIo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProductLambdaFunction"
              },
              "CodeSha256": "tDw545PlUTdJuZE5tOAPYNydxnNGW0op/DHoG6crSlo="
            }
          },
          "GetProductByIdLambdaVersionzN8SC0lE5LKV7yCqcuGQmmYM3pdmDdHE6cW5BkXdMC8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductByIdLambdaFunction"
              },
              "CodeSha256": "tDw545PlUTdJuZE5tOAPYNydxnNGW0op/DHoG6crSlo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-product-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsProductidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{productId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsProductidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsProductidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsProductidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.productId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsProductidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayProductserviceRequestValidator"
              }
            },
            "DependsOn": [
              "GetProductByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductsListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductsListLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayProductserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodProductsPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "CreateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayProductserviceRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "product-service-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayMethodProductsPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "title": "CreateProductValidation",
                "description": "Payload used to validate create product functionality",
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "integer"
                  },
                  "logo": {
                    "type": "string"
                  },
                  "count": {
                    "type": "integer"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "price",
                  "count"
                ]
              }
            }
          },
          "ApiGatewayDeployment1629794790817": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProductsProductidVarOptions",
              "ApiGatewayMethodProductsOptions",
              "ApiGatewayMethodProductsProductidVarGet",
              "ApiGatewayMethodProductsGet",
              "ApiGatewayMethodProductsPost"
            ]
          },
          "GetProductByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductsListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-product-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetProductsListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsListLambdaVersionln41AcAvcao9EndFnhfPakgTcYAzZGohrMMGOiiLNk"
            },
            "Export": {
              "Name": "sls-product-service-dev-GetProductsListLambdaFunctionQualifiedArn"
            }
          },
          "CreateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProductLambdaVersionp7UtJQJlS9CWvfoUkJ1zlyXFXpaeHutTpjYc7usIo"
            },
            "Export": {
              "Name": "sls-product-service-dev-CreateProductLambdaFunctionQualifiedArn"
            }
          },
          "GetProductByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductByIdLambdaVersionzN8SC0lE5LKV7yCqcuGQmmYM3pdmDdHE6cW5BkXdMC8"
            },
            "Export": {
              "Name": "sls-product-service-dev-GetProductByIdLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-product-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": true,
        "dotenvVars": {
          "GJS_DEBUG_TOPICS": "JS ERROR;JS LOG",
          "LESSOPEN": "| /usr/bin/lesspipe %s",
          "USER": "aliaksandr",
          "npm_config_user_agent": "npm/7.18.1 node/v10.22.1 linux x64 workspaces/false",
          "SSH_AGENT_PID": "2545",
          "XDG_SESSION_TYPE": "x11",
          "GIT_ASKPASS": "/snap/code/72/usr/share/code/resources/app/extensions/git/dist/askpass.sh",
          "npm_node_execpath": "/home/aliaksandr/.nvm/versions/node/v10.22.1/bin/node",
          "SHLVL": "1",
          "npm_config_noproxy": "",
          "QT4_IM_MODULE": "xim",
          "HOME": "/home/aliaksandr",
          "CHROME_DESKTOP": "code-url-handler.desktop",
          "TERM_PROGRAM_VERSION": "1.59.1",
          "DESKTOP_SESSION": "ubuntu",
          "NVM_BIN": "/home/aliaksandr/.nvm/versions/node/v10.22.1/bin",
          "npm_package_json": "/home/aliaksandr/My_own/AWS/shop-be/product-service/package.json",
          "NVM_INC": "/home/aliaksandr/.nvm/versions/node/v10.22.1/include/node",
          "GIO_LAUNCHED_DESKTOP_FILE": "/home/aliaksandr/.config/autostart/doublecmd.desktop",
          "APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL": "true",
          "GNOME_SHELL_SESSION_MODE": "ubuntu",
          "HOMEBREW_PREFIX": "/home/linuxbrew/.linuxbrew",
          "GTK_MODULES": "gail:atk-bridge",
          "VSCODE_GIT_ASKPASS_MAIN": "/snap/code/72/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",
          "VSCODE_GIT_ASKPASS_NODE": "/snap/code/72/usr/share/code/code",
          "MANAGERPID": "2096",
          "npm_config_userconfig": "/home/aliaksandr/.npmrc",
          "DBUS_SESSION_BUS_ADDRESS": "unix:path=/run/user/1001/bus",
          "COLORTERM": "truecolor",
          "GIO_LAUNCHED_DESKTOP_FILE_PID": "2900",
          "COLOR": "1",
          "NVM_DIR": "/home/aliaksandr/.nvm",
          "npm_config_metrics_registry": "https://registry.npmjs.org/",
          "MANDATORY_PATH": "/usr/share/gconf/ubuntu.mandatory.path",
          "IM_CONFIG_PHASE": "1",
          "INFOPATH": "/home/linuxbrew/.linuxbrew/share/info:/home/linuxbrew/.linuxbrew/share/info:",
          "GTK_IM_MODULE": "xim",
          "LOGNAME": "aliaksandr",
          "DESKTOP_AUTOSTART_ID": "105e771d217ccc9561162978620011649300000025810023",
          "JOURNAL_STREAM": "9:57409",
          "_": "/home/aliaksandr/.nvm/versions/node/v10.22.1/bin/npm",
          "npm_config_prefix": "/home/aliaksandr/.nvm/versions/node/v10.22.1",
          "XDG_SESSION_CLASS": "user",
          "DEFAULTS_PATH": "/usr/share/gconf/ubuntu.default.path",
          "USERNAME": "aliaksandr",
          "TERM": "xterm-256color",
          "npm_config_cache": "/home/aliaksandr/.npm",
          "GNOME_DESKTOP_SESSION_ID": "this-is-deprecated",
          "WINDOWPATH": "2",
          "npm_config_node_gyp": "/home/aliaksandr/.nvm/versions/node/v10.22.1/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",
          "PATH": "/home/aliaksandr/My_own/AWS/shop-be/product-service/node_modules/.bin:/home/aliaksandr/My_own/AWS/shop-be/node_modules/.bin:/home/aliaksandr/My_own/AWS/node_modules/.bin:/home/aliaksandr/My_own/node_modules/.bin:/home/aliaksandr/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/aliaksandr/.nvm/versions/node/v10.22.1/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/home/aliaksandr/.nvm/versions/node/v10.22.1/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/home/aliaksandr/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/aliaksandr/.local/bin:/home/aliaksandr/.local/bin",
          "SESSION_MANAGER": "local/wse-072-71a:@/tmp/.ICE-unix/2581,unix/wse-072-71a:/tmp/.ICE-unix/2581",
          "INVOCATION_ID": "4e426e0d356f4126bf29dea952cf9dcc",
          "HOMEBREW_CELLAR": "/home/linuxbrew/.linuxbrew/Cellar",
          "NODE": "/home/aliaksandr/.nvm/versions/node/v10.22.1/bin/node",
          "npm_package_name": "product-service",
          "XDG_MENU_PREFIX": "gnome-",
          "XDG_RUNTIME_DIR": "/run/user/1001",
          "GDK_BACKEND": "x11",
          "DISPLAY": ":0",
          "LANG": "en_US.UTF-8",
          "XDG_CURRENT_DESKTOP": "Unity",
          "XMODIFIERS": "@im=none",
          "XDG_SESSION_DESKTOP": "ubuntu",
          "XAUTHORITY": "/run/user/1001/gdm/Xauthority",
          "LS_COLORS": "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",
          "VSCODE_GIT_IPC_HANDLE": "/run/user/1001/vscode-git-c00eca5b3b.sock",
          "TERM_PROGRAM": "vscode",
          "npm_lifecycle_script": "sls deploy --aws-profile rs --stage dev",
          "SSH_AUTH_SOCK": "/run/user/1001/keyring/ssh",
          "GSETTINGS_SCHEMA_DIR": "/snap/code/72/usr/share/glib-2.0/schemas",
          "ORIGINAL_XDG_CURRENT_DESKTOP": "ubuntu:GNOME",
          "SHELL": "/bin/bash",
          "TERMINATOR_UUID": "urn:uuid:513eb7ed-3298-4d0d-ace0-99de0215f012",
          "DISABLE_WAYLAND": "1",
          "npm_package_version": "1.0.0",
          "npm_lifecycle_event": "deploy:dev",
          "QT_ACCESSIBILITY": "1",
          "NO_AT_BRIDGE": "1",
          "GDMSESSION": "ubuntu",
          "LESSCLOSE": "/usr/bin/lesspipe %s %s",
          "GPG_AGENT_INFO": "/run/user/1001/gnupg/S.gpg-agent:0:1",
          "GJS_DEBUG_OUTPUT": "stderr",
          "QT_IM_MODULE": "ibus",
          "npm_config_globalconfig": "/home/aliaksandr/.nvm/versions/node/v10.22.1/etc/npmrc",
          "npm_config_init_module": "/home/aliaksandr/.npm-init.js",
          "PWD": "/home/aliaksandr/My_own/AWS/shop-be/product-service",
          "npm_execpath": "/home/aliaksandr/.nvm/versions/node/v10.22.1/lib/node_modules/npm/bin/npm-cli.js",
          "XDG_CONFIG_DIRS": "/etc/xdg/xdg-ubuntu:/etc/xdg",
          "CLUTTER_IM_MODULE": "xim",
          "NVM_CD_FLAGS": "",
          "XDG_DATA_DIRS": "/usr/share/ubuntu:/usr/local/share:/usr/share:/var/lib/snapd/desktop",
          "HOMEBREW_REPOSITORY": "/home/linuxbrew/.linuxbrew/Homebrew",
          "npm_command": "run-script",
          "BREAKPAD_DUMP_LOCATION": "/home/aliaksandr/.config/Code/exthost Crash Reports",
          "MANPATH": "/home/linuxbrew/.linuxbrew/share/man:/home/aliaksandr/.nvm/versions/node/v10.22.1/share/man:/home/linuxbrew/.linuxbrew/share/man::",
          "VTE_VERSION": "6003",
          "INIT_CWD": "/home/aliaksandr/My_own/AWS/shop-be/product-service",
          "EDITOR": "vi"
        }
      }
    },
    "plugins": [
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "getProductById": {
        "handler": "handler.getProductById",
        "events": [
          {
            "http": {
              "path": "products/{productId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.productId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-getProductById",
        "package": {
          "artifact": ".serverless/product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetProductByIdLambdaVersionzN8SC0lE5LKV7yCqcuGQmmYM3pdmDdHE6cW5BkXdMC8"
      },
      "getProductsList": {
        "handler": "handler.getProductsList",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-getProductsList",
        "package": {
          "artifact": ".serverless/product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetProductsListLambdaVersionln41AcAvcao9EndFnhfPakgTcYAzZGohrMMGOiiLNk"
      },
      "createProduct": {
        "handler": "handler.createProduct",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodProductsPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-createProduct",
        "package": {
          "artifact": ".serverless/product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateProductLambdaVersionp7UtJQJlS9CWvfoUkJ1zlyXFXpaeHutTpjYc7usIo"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "variablesResolutionMode": "20210219",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/product-service/dev/1629794797755-2021-08-24T08:46:37.755Z",
    "artifact": ""
  }
}